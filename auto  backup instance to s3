Automate backup windows instance to aws s3 using cloud cli and task sheduler
----------------------------------------------------------------------------------------------------------------
1)create a s3
go to s3->creat a bucket->name->unblock all public access->create bucket->copy the ARN bucket(arn:aws:s3:::back-proj440)
2)create a IAM user and set some policy to access amazon s3 and perform operation(upload,delete,download)

go to aws console-> go to IAM->users->adduser->username(project-IAM)->create
go to IAM->policy->create policies->JOSN->next->create policy->create policy
JOSN FILE:
==
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Sid": "VisualEditor0",
            "Effect": "Allow",
            "Action": "s3:ListBucket",
            "Resource": "arn:aws:s3:::back-proj440"
        },
        {
            "Sid": "VisualEditor1",
            "Effect": "Allow",
            "Action": [
                "s3:PutAnalyticsConfiguration",
                "s3:GetObjectVersionTagging",
                "s3:CreateBucket",
                "s3:ReplicateObject",
                "s3:GetObjectAcl",
                "s3:DeleteBucketWebsite",
                "s3:PutLifecycleConfiguration",
                "s3:GetObjectVersionAcl",
                "s3:PutBucketAcl",
                "s3:PutObjectTagging",
                "s3:DeleteObject",
                "s3:GetIpConfiguration",
                "s3:DeleteObjectTagging",
                "s3:GetBucketWebsite",
                "s3:PutReplicationConfiguration",
                "s3:DeleteObjectVersionTagging",
                "s3:DeleteBucketPolicy",
                "s3:GetBucketNotification",
                "s3:PutBucketCORS",
                "s3:GetReplicationConfiguration",
                "s3:ListMultipartUploadParts",
                "s3:GetObject",
                "s3:PutBucketNotification",
                "s3:PutObject",
                "s3:PutBucketLogging",
                "s3:PutObjectVersionAcl",
                "s3:GetAnalyticsConfiguration",
                "s3:GetObjectVersionForReplication",
                "s3:GetLifecycleConfiguration",
                "s3:ListBucketByTags",
                "s3:GetBucketTagging",
                "s3:GetInventoryConfiguration",
                "s3:PutAccelerateConfiguration",
                "s3:DeleteObjectVersion",
                "s3:GetBucketLogging",
                "s3:ListBucketVersions",
                "s3:ReplicateTags",
                "s3:RestoreObject",
                "s3:GetAccelerateConfiguration",
                "s3:ListBucket",
                "s3:GetBucketPolicy",
                "s3:GetObjectVersionTorrent",
                "s3:AbortMultipartUpload",
                "s3:GetBucketRequestPayment",
                "s3:PutBucketTagging",
                "s3:GetObjectTagging",
                "s3:GetMetricsConfiguration",
                "s3:DeleteBucket",
                "s3:PutBucketVersioning",
                "s3:PutObjectAcl",
                "s3:ListBucketMultipartUploads",
                "s3:PutMetricsConfiguration",
                "s3:PutObjectVersionTagging",
                "s3:GetBucketVersioning",
                "s3:GetBucketAcl",
                "s3:PutInventoryConfiguration",
                "s3:PutIpConfiguration",
                "s3:GetObjectTorrent",
                "s3:ObjectOwnerOverrideToBucketOwner",
                "s3:PutBucketRequestPayment",
                "s3:PutBucketWebsite",
                "s3:GetBucketCORS",
                "s3:PutBucketPolicy",
                "s3:GetBucketLocation",
                "s3:GetObjectVersion",
                "s3:ReplicateDelete"
            ],
            "Resource": "arn:aws:s3:::back-proj440/*"
        },
        {
            "Sid": "VisualEditor2",
            "Effect": "Allow",
            "Action": [
                "s3:ListAllMyBuckets",
                "s3:HeadBucket",
                "s3:ListObjects"
            ],
            "Resource": "*"
        }
    ]
}
==
Select the policy->action->attach->selct the iam user(project-IAM)->save


3)create a ec2 instance

go to ec2 and create a windows server machine

3)open the server machine and download aws cli

go to google and search aws cli-> windows->https://awscli.amazonaws.com/AWSCLIV2.msi->install the aws cli

open cmd ->write "aws configure"->Access key ID,Secret access key(open IAM->select the iam->security credential->Access keys->cli->create->download csv->copy the Access key ID,Secret access key)->enter 

open cmd -> "aws --version"

4)create a script file 

"aws s3 sync C:\s3backup(local directory) s3://back-proj440(s3 directory)"

->save as->script.bat

5)go to task sheduler and configure it

->task sheduler->create task->name(ec2tos3backup)->ok->trigger->new->repeat task everyday(5 minute)->action->new->brows->select the script.bat folder->ok->go to task sheduler library->select the job->run

__________________________________________________________________________________________________________________________________
